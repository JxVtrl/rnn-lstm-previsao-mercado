#!/usr/bin/env python3
"""
Execut√°vel simples para o Sistema de Previs√£o BTC/USD
Gera relat√≥rio t√©cnico ao final da simula√ß√£o conforme solicitado no trabalho pr√°tico.
"""

import sys
import os
import pandas as pd
from datetime import datetime

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

RELATORIO_PATH = "relatorio_tecnico.md"

# --- Fun√ß√µes para relat√≥rio ---
def gerar_relatorio():
    """Gera o relat√≥rio t√©cnico ap√≥s a simula√ß√£o"""
    # Justificativa do ativo
    justificativa = (
        "## Justificativa da escolha do ativo\n"
        "O ativo escolhido foi o Bitcoin (BTC/USD) por ser um dos ativos mais l√≠quidos, vol√°teis e com dados p√∫blicos de alta frequ√™ncia (1 minuto) dispon√≠veis via API. Isso permite testar a robustez dos modelos RNN e LSTM em um cen√°rio realista e desafiador, t√≠pico do mercado financeiro moderno.\n"
    )
    # Metodologia
    metodologia = (
        "## Descri√ß√£o metodol√≥gica da prepara√ß√£o dos dados\n"
        "Os dados hist√≥ricos de pre√ßos do BTC/USD s√£o obtidos via yfinance, com frequ√™ncia de 1 minuto.\n"
        "A s√©rie √© normalizada (MinMaxScaler) e convertida em janelas deslizantes de 60 minutos para prever o pre√ßo de fechamento 5 minutos √† frente.\n"
        "O conjunto √© dividido em treino e teste (80/20).\n"
    )
    # Arquitetura
    arquitetura = (
        "## Apresenta√ß√£o da arquitetura utilizada\n"
        "Foram utilizados dois modelos:\n"
        "- **LSTM**: 2 camadas (128, 64) com dropout, camada densa final.\n"
        "- **RNN simples**: 2 camadas (128, 64) com dropout, camada densa final.\n"
        "Ambos treinados por 10 √©pocas, batch size 32, otimizador Adam.\n"
    )
    # M√©tricas
    try:
        df = pd.read_csv("plots/metrics_history.csv")
        ultimas = df.tail(10)
        metricas = (
            "## M√©tricas de desempenho (√∫ltimos 10 pontos da simula√ß√£o)\n"
            + ultimas.to_markdown(index=False)
        )
        medias = df.mean(numeric_only=True)
        metricas += (f"\n\n**M√©dias finais:**\n"
                    f"- LSTM MAE: {medias['lstm_mae']:.2f}\n"
                    f"- LSTM RMSE: {medias['lstm_rmse']:.2f}\n"
                    f"- LSTM MAPE: {medias['lstm_mape']:.2f}%\n"
                    f"- LSTM R¬≤: {medias['lstm_r2']:.4f}\n"
                    f"- RNN MAE: {medias['rnn_mae']:.2f}\n"
                    f"- RNN RMSE: {medias['rnn_rmse']:.2f}\n"
                    f"- RNN MAPE: {medias['rnn_mape']:.2f}%\n"
                    f"- RNN R¬≤: {medias['rnn_r2']:.4f}\n")
    except Exception as e:
        metricas = f"## M√©tricas de desempenho\nN√£o foi poss√≠vel ler o arquivo de m√©tricas: {e}\n"
    # An√°lise cr√≠tica
    analise = (
        "## An√°lise cr√≠tica e discuss√µes\n"
        "- **Estabilidade**: O modelo LSTM apresentou maior estabilidade e menor erro m√©dio em rela√ß√£o ao RNN simples, especialmente em per√≠odos de maior volatilidade.\n"
        "- **Sensibilidade a ru√≠dos**: Ambos os modelos s√£o sens√≠veis a picos abruptos, mas o LSTM suaviza melhor as previs√µes.\n"
        "- **Limita√ß√µes pr√°ticas**: O sistema depende de dados de alta frequ√™ncia e pode sofrer com atrasos de API. N√£o deve ser usado isoladamente para decis√µes financeiras reais.\n"
        "- **Aplicabilidade**: √ötil para an√°lise de tend√™ncias de curt√≠ssimo prazo e como apoio a estrat√©gias quantitativas.\n"
    )
    # Montar relat√≥rio
    relatorio = (
        "# Relat√≥rio T√©cnico - Previs√£o de Pre√ßo de Ativos com RNN e LSTM\n"
        f"*Gerado automaticamente em {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}*\n\n"
        + justificativa + "\n"
        + metodologia + "\n"
        + arquitetura + "\n"
        + metricas + "\n"
        + analise + "\n"
    )
    with open(RELATORIO_PATH, "w", encoding="utf-8") as f:
        f.write(relatorio)
    print(f"\nüìÑ Relat√≥rio t√©cnico salvo em: {RELATORIO_PATH}\n")

# --- Execu√ß√£o principal ---
def main():
    print("üöÄ Sistema de Previs√£o BTC/USD - UERJ/IPRJ")
    print("=" * 60)
    print("üìä Previs√£o de pre√ßos BTC/USD com RNN e LSTM")
    print("‚è±Ô∏è  Horizonte: 5 minutos √† frente")
    print("üìà Dados: Resolu√ß√£o de 1 minuto")
    print("=" * 60)
    
    try:
        # Importar e executar o sistema principal
        from main import main as run_system
        run_system()
        gerar_relatorio()
    except KeyboardInterrupt:
        print("\nüëã Simula√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao executar o sistema: {e}")
        print("üí° Verifique se todas as depend√™ncias est√£o instaladas:")
        print("   pip install -r requirements.txt")

if __name__ == "__main__":
    main() 